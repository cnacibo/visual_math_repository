function getCorrectAnswers(questionsData) {
    const correctAnswersMap = {};
    questionsData.forEach((questionObj, questionIndex) => {
        const question = questionObj.questionData || questionObj;
        if (question.answers) {
            correctAnswersMap[questionIndex] = question.answers
                .map((answer, idx) => answer.isCorrect ? idx : -1)
                .filter(idx => idx !== -1);
        }
    });
    return correctAnswersMap;
}

async function exportStatsToCSV(slideIndex, questionsData) {
    if (!answerStats[slideIndex]?.students) {
        console.error(`–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–∞–π–¥–∞ ${slideIndex}`);
        alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–∞–π–¥–∞.");
        return;
    }
    const correctAnswersData = getCorrectAnswers(questionsData);
    const allQuestions = answerStats[slideIndex].questions
        ? Object.keys(answerStats[slideIndex].questions).sort((a, b) => parseInt(a) - parseInt(b))
        : [];

    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CSV
    let csvContent = "data:text/csv;charset=utf-8,";
    csvContent += "‚Ññ,–°—Ç—É–¥–µ–Ω—Ç";
    allQuestions.forEach((qIndex, i) => {
        csvContent += `,–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ${i+1},–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç`;
    });
    csvContent += ",–ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Ä–Ω—ã—Ö\n";

    let rowNumber = 1;
    const namePromises = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    for (const [studentId, studentData] of Object.entries(answerStats[slideIndex].students)) {
        try {
            const name = await getStudentNameById(studentId)
                          .catch(() => `–°—Ç—É–¥–µ–Ω—Ç ${studentId}`);

            const row = buildStudentRow(
                rowNumber++,
                name,
                studentData,
                allQuestions,
                correctAnswersData
            );
            namePromises.push(Promise.resolve(row));
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${studentId}:`, error);
            const row = buildStudentRow(
                rowNumber++,
                `–°—Ç—É–¥–µ–Ω—Ç ${studentId}`,
                studentData,
                allQuestions,
                correctAnswersData
            );
            namePromises.push(Promise.resolve(row));
        }
    }

    const rows = await Promise.all(namePromises);
    csvContent += rows.join('\n');

    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.href = encodedUri;
    link.download = `presentation_${currentPresentationId}_slide_${slideIndex + 1}_${new Date().toISOString().slice(0,10)}.csv`;
    document.body.appendChild(link);
    link.click();
    link.remove();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
function buildStudentRow(rowNumber, studentName, studentData, allQuestions, correctAnswersData) {
    let row = `${rowNumber},${studentName}`;
    let correctAnswers = 0;
    let totalQuestions = 0;

    allQuestions.forEach(questionIndex => {
        let answerStr = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞";
        let correctnessFlag = "";

        if (studentData.questions?.[questionIndex]) {
            const studentAnswers = studentData.questions[questionIndex].answers;
            const selectedIndices = studentAnswers
                .map((val, idx) => val === 1 ? idx : null)
                .filter(val => val !== null);

            answerStr = selectedIndices.join(', ') || "–ù–µ—Ç";

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
            if (correctAnswersData[questionIndex]) {
                const required = correctAnswersData[questionIndex];
                const isMultiple = required.length > 1;

                const isCorrect = isMultiple
                    ? required.every(idx => studentAnswers[idx] === 1) &&
                      selectedIndices.length === required.length
                    : selectedIndices.length === 1 &&
                      required.includes(selectedIndices[0]);

                correctnessFlag = isCorrect ? "–¥–∞" : "–Ω–µ—Ç";
                if (isCorrect) correctAnswers++;
                totalQuestions++;
            }
        }

        row += `,"${answerStr}",${correctnessFlag}`;
    });

    const percentCorrect = totalQuestions > 0
        ? Math.round((correctAnswers / totalQuestions) * 100)
        : 0;
    row += `,${percentCorrect}%`;

    return row;
}

const studentNameCache = {};

async function getStudentNameById(studentId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (studentNameCache[studentId]) {
        return studentNameCache[studentId];
    }

    try {
        const response = await fetch(`/presentations/students/${encodeURIComponent(studentId)}/`);
        if (!response.ok) throw new Error('Network response was not ok');

        const data = await response.json();
        if (data.status === 'success') {
            studentNameCache[studentId] = data.name;
            return data.name;
        }
        throw new Error('Student not found');
    } catch (error) {
        console.error('Error fetching student name:', error);
        return `–°—Ç—É–¥–µ–Ω—Ç ${studentId}`;
    }
}

function showQuestionnaireStats(slideIndex) {
    const statsContainer = document.getElementById(`questionnaire-stats-${slideIndex}`);

    if (!statsContainer) {
        console.error(`–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slideIndex}`);
        return;
    }
    console.log("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", JSON.stringify(answerStats, null, 2));

    if (!answerStats[slideIndex]) {
        statsContainer.innerHTML = "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>";
        statsContainer.style.display = "block";
        return;
    }
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–ª—è —Å–ª–∞–π–¥–∞
    const slideStats = answerStats[slideIndex].questions;
    let html = "<h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤</h3>";

    Object.keys(slideStats).forEach((questionIndex) => {
        const question = slideStats[questionIndex];

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        const answerCounts = new Array(question.answers.length).fill(0);  // –ú–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤
        Object.keys(answerStats[slideIndex].students).forEach((userId) => {
            const userStat = answerStats[slideIndex].students[userId];

            if (userStat.questions[questionIndex]) {
                const userAnswer = userStat.questions[questionIndex].answers;
                userAnswer.forEach((answer, index) => {
                    if (answer === 1) {
                        answerCounts[index] += 1;  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    }
                });
            }
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        html += `<div class="question-stat"><strong>–í–æ–ø—Ä–æ—Å ${parseInt(questionIndex) + 1}:</strong><ul>`;
        answerCounts.forEach((count, index) => {
            const answerText = count === 1 ? '–≥–æ–ª–æ—Å' : (count > 1 ? '–≥–æ–ª–æ—Å–æ–≤' : '–≥–æ–ª–æ—Å–æ–≤');
            html += `<li>–û—Ç–≤–µ—Ç ${index + 1}: ${count} ${answerText}</li>`;
        });
        html += "</ul></div>";

        const totalRespondents = Object.keys(answerStats[slideIndex].students).length;
        html += `<div class="pie-chart-container" style="display: flex; flex-wrap: wrap; gap: 20px;">`;

        answerCounts.forEach((count, index) => {
            //const percentage = total > 0 ? (count / total) * 100 : 0;
            const percentage = totalRespondents > 0 ? (count / totalRespondents) * 100 : 0;
            const roundedPercentage = Math.round(percentage * 10) / 10;
            html += `
            <div class="pie-chart-wrapper">
                <div class="pie-chart" style="--percentage: ${percentage}">
                    <span class="pie-value">${roundedPercentage}%</span>
                </div>
                <div class="pie-label">–û—Ç–≤–µ—Ç ${index + 1}</div>
            </div>`;
        });
        html += `</div>`;
    });

    statsContainer.innerHTML = html;
    statsContainer.style.display = "block";
}
function updateQuestionnaireStats(slideIndex, stat) {
    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–∞ ${slideIndex}:`, stat);

    // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–∞–π–¥–∞ –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ answerStats, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    if (!answerStats[slideIndex]) {
        answerStats[slideIndex] = {
            questions: {},  // –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–∞–π–¥–∞
            students: {}    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        };
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (stat.questions) {
        answerStats[slideIndex].questions = stat.questions;
    }
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    if (stat.students) {
        Object.keys(stat.students).forEach((userId) => {
            // –ï—Å–ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            if (stat.students[userId].questions) {
                answerStats[slideIndex].students[userId] = stat.students[userId];
            }
        });
    }
    // –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", JSON.stringify(answerStats, null, 2));

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let html = "<h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:</h3>";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (Object.keys(answerStats[slideIndex].questions).length === 0) {
        html += "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ø—Ä–æ—Å–∞—Ö</p>";
    } else {
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        Object.keys(answerStats[slideIndex].questions).forEach((questionIndex) => {
            const question = answerStats[slideIndex].questions[questionIndex];
            html += `<p><b>–í–æ–ø—Ä–æ—Å ${parseInt(questionIndex) + 1}</b></p>`;

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            const answerCounts = new Array(question.answers.length).fill(0);

            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤
            Object.keys(answerStats[slideIndex].students).forEach((userId) => {
                const userStat = answerStats[slideIndex].students[userId];
                if (userStat.questions && userStat.questions[questionIndex]) {
                    const userAnswer = userStat.questions[questionIndex].answers;
                    userAnswer.forEach((answer, index) => {
                        if (answer === 1) {
                            answerCounts[index] += 1;
                        }
                    });
                }
            });
            answerCounts.forEach((count, index) => {
                const percentage = (count / answerCounts.reduce((a, b) => a + b, 1)) * 100 || 0;
                html += `
                <div class="pie-chart-wrapper">
                    <div class="pie-chart" style="--percentage: ${percentage}">
                        <span class="pie-value">${Math.round(percentage)}%</span>
                    </div>
                    <div class="pie-label">–û—Ç–≤–µ—Ç ${index + 1}</div>
                </div>`;
            });
            html += `</div>`;
        });
    }
}